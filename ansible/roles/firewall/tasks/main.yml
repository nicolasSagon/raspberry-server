- name: Enable IP forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    sysctl_set: yes
    reload: yes

- name: Set iptables rules with VPN kill switch and Docker support
  copy:
    dest: /etc/iptables/rules.v4
    content: |
      *nat
      :POSTROUTING ACCEPT [0:0]
      # VPN NAT
      -A POSTROUTING -o tun0 -j MASQUERADE
      # Docker NAT - SEULEMENT vers VPN
      -A POSTROUTING -s 172.17.0.0/16 -o tun0 -j MASQUERADE
      COMMIT

      *filter
      :INPUT DROP [0:0]
      :FORWARD DROP [0:0]
      :OUTPUT DROP [0:0]
      :DOCKER-USER - [0:0]
      
      # ═══════════════════════════════════════════════════════════════
      # KILL SWITCH : Bloquer TOUT sauf VPN et trafic local
      # ═══════════════════════════════════════════════════════════════
      
      # 1. Autoriser le loopback
      -A INPUT -i lo -j ACCEPT
      -A OUTPUT -o lo -j ACCEPT
      
      # 2. Autoriser les connexions établies
      -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
      -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
      -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
      
      # 3. SSH depuis réseau local Ethernet
      -A INPUT -i eth0 -s 192.168.1.0/24 -p tcp --dport 22 -j ACCEPT
      
      # 4. KILL SWITCH - Autoriser SEULEMENT le trafic VPN
      -A OUTPUT -p udp --dport 1194 -j ACCEPT
      -A OUTPUT -o tun+ -j ACCEPT
      
      # 5. Bloquer les fuites Internet
      -A OUTPUT -o eth0 ! -d 192.168.1.0/24 -j DROP
      -A OUTPUT -o wlan0 ! -d 10.0.0.0/24 -j DROP
      
      # 5b. Bloquer Docker vers Internet direct (dans OUTPUT)
      -A OUTPUT -s 172.17.0.0/16 -o eth0 -j DROP
      -A OUTPUT -s 172.17.0.0/16 -o wlan0 -j DROP
      
      # ═══════════════════════════════════════════════════════════════
      # DOCKER NETWORKING
      # ═══════════════════════════════════════════════════════════════
      
      # 6. Docker bridge communication
      -A INPUT -i docker0 -j ACCEPT
      -A OUTPUT -o docker0 -j ACCEPT
      -A FORWARD -i docker0 -o docker0 -j ACCEPT
      
      # 7. Docker containers vers VPN uniquement
      -A FORWARD -i docker0 -o tun0 -j ACCEPT
      -A FORWARD -i tun0 -o docker0 -j ACCEPT
      # BLOQUER Docker vers Internet direct
      -A FORWARD -i docker0 -o eth0 -j DROP
      -A FORWARD -i docker0 -o wlan0 -j DROP
      
      # 8. Docker containers accessibles depuis Wi-Fi
      -A FORWARD -s 10.0.0.0/24 -d 172.17.0.0/16 -j ACCEPT
      -A FORWARD -s 172.17.0.0/16 -d 10.0.0.0/24 -j ACCEPT
      
      # 9. DOCKER-USER : Kill switch absolu pour Docker
      -A DOCKER-USER -i docker0 -o eth0 -j DROP
      -A DOCKER-USER -i docker0 -o wlan0 -j DROP
      -A DOCKER-USER -o eth0 -j DROP
      -A DOCKER-USER -o wlan0 -j DROP
      -A DOCKER-USER -j RETURN
      
      # ═══════════════════════════════════════════════════════════════
      # WI-FI ACCESS POINT (10.0.0.0/24)
      # ═══════════════════════════════════════════════════════════════
      
      # 10. Wi-Fi AP communication
      -A INPUT -i wlan0 -s 10.0.0.0/24 -j ACCEPT
      -A OUTPUT -o wlan0 -d 10.0.0.0/24 -j ACCEPT
      
      # 11. DHCP pour Wi-Fi
      -A INPUT -i wlan0 -p udp --dport 67 -j ACCEPT
      -A OUTPUT -o wlan0 -p udp --sport 67 -j ACCEPT
      
      # 12. DNS pour Wi-Fi
      -A INPUT -i wlan0 -p udp --dport 53 -j ACCEPT
      -A INPUT -i wlan0 -p tcp --dport 53 -j ACCEPT
      
      # ═══════════════════════════════════════════════════════════════
      # VPN FORWARDING
      # ═══════════════════════════════════════════════════════════════
      
      # 13. Wi-Fi vers VPN
      -A FORWARD -i wlan0 -o tun+ -j ACCEPT
      -A FORWARD -i tun+ -o wlan0 -j ACCEPT
      
      # 14. Bloquer Wi-Fi vers Ethernet (kill switch)
      -A FORWARD -i wlan0 -o eth0 -j DROP
      
      # ═══════════════════════════════════════════════════════════════
      # K3S SECURITY (seulement depuis VPN network)
      # ═══════════════════════════════════════════════════════════════
      
      # 15. K3s API (VPN uniquement)
      -A INPUT -s 10.0.0.0/24 -p tcp --dport 6443 -j ACCEPT
      -A INPUT -s 192.168.1.0/24 -p tcp --dport 6443 -j DROP
      
      # 12. K3s Kubelet
      -A INPUT -s 10.0.0.0/24 -p tcp --dport 10250 -j ACCEPT
      -A INPUT -s 192.168.1.0/24 -p tcp --dport 10250 -j DROP
      
      # 13. K3s NodePort services
      -A INPUT -s 10.0.0.0/24 -p tcp --dport 30000:32767 -j ACCEPT
      -A INPUT -s 192.168.1.0/24 -p tcp --dport 30000:32767 -j DROP
      
      # 14. K3s Internal cluster communication
      -A INPUT -s 10.42.0.0/16 -p udp --dport 8472 -j ACCEPT
      -A INPUT -s 10.43.0.0/16 -j ACCEPT
      -A INPUT -s 10.0.0.0/24 -p udp --dport 8472 -j ACCEPT
      
      COMMIT

- name: Reload iptables
  shell: iptables-restore < /etc/iptables/rules.v4

- name: Restart Docker to recreate iptables chains
  systemd:
    name: docker
    state: restarted